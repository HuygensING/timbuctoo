#This config allows you to run a local debug version of timbuctoo
#it also explains the options that you need to configure a production-worthy version

securityConfiguration:
  "@class": nl.knaw.huygens.timbuctoo.v5.security.dummy.DummySecurityFactoryConfiguration
  accessFactory:
    "@class": nl.knaw.huygens.timbuctoo.security.dataaccess.localfile.LocalfileAccessFactory
    authorizationsPath: ${timbuctoo_dataPath}/datasets
    permissionConfig: ${timbuctoo_dataPath}/permissionConfig.json
    usersFilePath: ${timbuctoo_authPath}/users.json

baseUri: ${base_uri} #specifying 0 as port will replace it with the port that timbuctoo ends up listening on
userRedirectUrl: ./static/graphiql

collectionFilters:
  elasticsearch:
    "@class": nl.knaw.huygens.timbuctoo.v5.elasticsearch.ElasticSearchFilter
    hostname: ${timbuctoo_elasticsearch_host}
    port: ${timbuctoo_elasticsearch_port}
    username: ${timbuctoo_elasticsearch_user}
    password: ${timbuctoo_elasticsearch_password}

archetypesSchema: |
  type Archetypes {
    persons: PersonArchetypeList @fromCollection(uri: "http://timbuctoo.huygens.knaw.nl/datasets/clusius/Persons", listAll: true, indexName: "PersonArchetype")
  }

  type PersonArchetypeList {
    prevCursor: ID
    nextCursor: ID
    items: [PersonArchetype!]!
  }

  type PersonArchetype {
    names: Value @rdf(predicate: "http://timbuctoo.huygens.knaw.nl/properties/names", direction: "OUT", isValue: true, isObject: false, isList: false)
  }

defaultSummaryProps:
  defaultTitles:
  - path:
    - http://timbuctoo.huygens.knaw.nl/static/v5/predicate/names
    type: SimplePath
  - path:
    - http://schema.org/name
    type: SimplePath
  - path:
    - http://schema.org/title
    type: SimplePath
  - path:
    - http://www.w3.org/2000/01/rdf-schema#label
    type: SimplePath
  - path:
    - http://www.w3.org/2004/02/skos/core#prefLabel
    type: SimplePath
  defaultDescriptions:
  - path:
    - http://schema.org/description
    type: SimplePath
  defaultImages:
  - path:
    - http://xmlns.com/foaf/0.1/img
    type: SimplePath
  - path:
    - http://xmlns.com/foaf/0.1/depiction
    type: SimplePath
  - path:
    - http://schema.org/image
    type: SimplePath

metadata:
  props:
    title:
      type: SimpleMetadataProp
      predicate: http://purl.org/dc/terms/title
    description:
      type: SimpleMetadataProp
      predicate: http://purl.org/dc/terms/description
      valueType: https://daringfireball.net/projects/markdown/syntax
    imageUrl:
      type: SimpleMetadataProp
      predicate: http://xmlns.com/foaf/0.1/depiction
    license:
      type: UriMetadataProp
      predicate: http://purl.org/dc/terms/license
    owner:
      type: EntityMetadataProp
      predicate: http://purl.org/dc/terms/rightsHolder
      useBaseUri: true
      entityUri: rightsHolder
      properties:
        name:
          type: SimpleMetadataProp
          predicate: http://schema.org/name
        email:
          type: SimpleMetadataProp
          predicate: http://schema.org/email
    contact:
      type: EntityMetadataProp
      predicate: http://schema.org/ContactPoint
      useBaseUri: true
      entityUri: ContactPoint
      properties:
        name:
          type: SimpleMetadataProp
          predicate: http://schema.org/name
        email:
          type: SimpleMetadataProp
          predicate: http://schema.org/email
    provenanceInfo:
      type: EntityMetadataProp
      predicate: http://purl.org/dc/terms/provenance
      useBaseUri: true
      entityUri: Provenance
      properties:
        title:
          type: SimpleMetadataProp
          predicate: http://purl.org/dc/terms/title
        body:
          type: SimpleMetadataProp
          predicate: http://purl.org/dc/terms/description
          valueType: https://daringfireball.net/projects/markdown/syntax

databases:
  databaseLocation: ${timbuctoo_dataPath}/datasets

databaseConfiguration:
  databasePath: ${timbuctoo_dataPath}/neo4j

dataSet:
  dataStorage:
    "@class": nl.knaw.huygens.timbuctoo.v5.datastorage.implementations.filesystem.FileSystemDataStorage
    rootDir: ${timbuctoo_dataPath}/datasets
    rdfIo:
      "@class": nl.knaw.huygens.timbuctoo.v5.rdfio.implementations.rdf4j.Rdf4jIoFactory
      rdfFormat: application/n-quads

# The base uri will be the base uri for all the generated RDF by Timbuctoo.
rdfUriHelper:
  rdfBaseUri: http://example.org/

# Timeouts
# the 'duration' is a number
# the timeUnit is a 'java.util.concurrent.TimeUnit'
searchResultAvailabilityTimeout:
  duration: 8
  timeUnit: HOURS

webhooks:
  vreAdded: ${timbuctoo_search_url}
  dataSetUpdated: ${timbuctoo_indexer_url}
  httpClient:
    connectionRequestTimeout: 200ms

redirectionService:
  "@class": nl.knaw.huygens.timbuctoo.v5.redirectionservice.DummyRedirectionServiceFactory
# If using HandleServiceFactory you need:
#  privateKeyFile:
#  cypher:
#  namingAuthority:
#  prefix:
# If using BitlyServiceFactory you need:
#  accessToken:

#Note! disable this for production builds
allowGremlinEndpoint: true

server:
  applicationConnectors:
    - type: http #Note! if you change this you might or might not also want to change the baseUri
      port: ${timbuctoo_port} #Note! if you change this you might or might not also want to change the baseUri
  adminConnectors:
    - type: http
      port: ${timbuctoo_adminPort}
  requestLog:
    appenders: [] #All requests are already logged using logging.LoggingFilter so the seperate requestlog is not needed

logging:
  appenders:
    - type: console
      logFormat: "- %-5p  %m [%c{60}]%n"
#enable this to send the logs to an external log server
#    - type: gelf
#      host: 192.168.99.100
#      port: 32768
#      useMarker: true #
#      includeFullMDC: true #We put the request information in the MDC
  level: INFO

#enable this to send the metrics to graphite
#metrics:
#  reporters:
#     - type: graphite
#       host: 192.168.99.100
#       port: 32778
#       prefix: timbuctoo
