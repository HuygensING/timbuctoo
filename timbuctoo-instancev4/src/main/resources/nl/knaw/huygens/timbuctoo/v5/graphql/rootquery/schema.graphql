schema {
  query: Query,
  mutation: Mutation
}

interface Value {
  value: String!
  type: String!
}

interface Entity {
  uri: String!
}

type Facet {
    caption: String!	@fake(type: productCategory)
    options: [Option!]!
}

type Option {
    name: String!	@fake(type: productName)
    count: Int! @fake(type:money)
}

type Query {
  #the datasets that are supposed to get extra attention
  promotedDataSets: [DataSetMetadata!]!

  #all the dataSets, with and without the promoted ones
  allDataSets: [DataSetMetadata!]!

  #The actual dataSets
  #dataSets: DataSets (Added using extends if there is actually a dataSet available)

  #metadata for a specific dataset
  dataSetMetadata(dataSetId: ID): DataSetMetadata

  #information about the logged in user, or null of no user is logged in
  aboutMe: AboutMe

  #all mimetypes that you can use when downloading data from a dataSet
  availableExportMimetypes: [MimeType!]!
}

type MimeType {
  name: String!
}

type DataSetMetadata {
  uri: String! @uri
  dataSetId: ID!
  title: Value @rdf(predicate: "http://purl.org/dc/terms/title", direction: "OUT", isList: false, isObject: false, isValue: true)
  description: Value @rdf(predicate: "http://purl.org/dc/terms/description", direction: "OUT", isList: false, isObject: false, isValue: true)
  imageUrl: Value @rdf(predicate: "http://xmlns.com/foaf/0.1/depiction", direction: "OUT", isList: false, isObject: false, isValue: true)
  owner: ContactInfo @rdf(predicate: "http://purl.org/dc/terms/rightsHolder", direction: "OUT", isList: false, isObject: true, isValue: false)
  contact: ContactInfo @rdf(predicate: "http://schema.org/ContactPoint", direction: "OUT", isList: false, isObject: true, isValue: false)
  provenanceInfo: ProvenanceInfo @rdf(predicate: "http://purl.org/dc/terms/provenance", direction: "OUT", isList: false, isObject: true, isValue: false)
  license: License @rdf(predicate: "http://purl.org/dc/terms/license", direction: "OUT", isList: false, isObject: true, isValue: false)

  #archetypes: Archetypes! @passThrough (added by the RootQuery based on the config)

  collection(collectionId: ID!): CollectionMetadata
  collectionList(count: Int = 20, cursor: ID = ""): CollectionMetadataList
}

type AboutMe {
  #datasets that this user has some specific permissions on
  dataSets: [DataSetMetadata!]!

  #The unique identifier of this user
  id: ID!

  #a human readable name (or empty string if not available)
  name: String!

  #a url to a page with personal information on this user
  personalInfo: String!

  #This user may create a new dataset on this timbuctoo instance
  canCreateDataSet: Boolean!
}

type CollectionMetadataList {
  prevCursor: ID
  nextCursor: ID
  items: [CollectionMetadata!]!
}

type CollectionMetadata {
  uri: String! @uri
  collectionId: ID!
  collectionListId: ID!

  properties(count: Int = 20, cursor: ID = ""): PropertyList!
  total: Int!

  title: Value @rdf(predicate: "http://www.w3.org/2000/01/rdf-schema#label", direction: "OUT", isList: false, isObject: false, isValue: true)
  archeType: Entity @rdf(predicate: "http://www.w3.org/2000/01/rdf-schema#subClassOf", direction: "OUT", isList: false, isObject: true, isValue: false)
  indexConfig: IndexConfig!
  summaryProperties: SummaryProperties! @passThrough
  editConfig: [Component]!
  viewConfig: [Component]!
}

type SummaryProperties {
  title: Value @rdf(predicate: "http://timbuctoo.huygens.knaw.nl/static/v5/vocabulary#summaryTitlePredicate", direction: "OUT", isList: false, isObject: false, isValue: true)
  description: Value @rdf(predicate: "http://timbuctoo.huygens.knaw.nl/static/v5/vocabulary#summaryDescriptionPredicate", direction: "OUT", isList: false, isObject: false, isValue: true)
  image: Value @rdf(predicate: "http://timbuctoo.huygens.knaw.nl/static/v5/vocabulary#summaryImagePredicate", direction: "OUT", isList: false, isObject: false, isValue: true)
}

type IndexConfig {
  facet: [FacetConfig]!
  fullText: [FullTextConfig]!
}

type FacetConfig {
  paths: [String]
  type: String
  caption: String
}

type FullTextConfig {
  caption: String
  fields: [FullTextFieldConfig]
}

type FullTextFieldConfig {
  path: String
  boost: Float
}

type PropertyList {
  prevCursor: ID
  nextCursor: ID
  items: [Property!]!
}

type Property {
  name: String
  density: Int
  isList: Boolean
  referencedCollections(count: Int = 20, cursor: ID = ""): CollectionIdList
  isValueType: Boolean
}

type CollectionIdList {
  prevCursor: ID
  nextCursor: ID
  items: [String!]!
}

type ContactInfo {
  name: Value @rdf(predicate: "http://schema.org/name", direction: "OUT", isList: false, isObject: false, isValue: true)
  email: Value @rdf(predicate: "http://schema.org/email", direction: "OUT", isList: false, isObject: false, isValue: true)
}

type License {
  uri: String! @uri
}

type ProvenanceInfo {
  title: Value @rdf(predicate: "http://purl.org/dc/terms/title", direction: "OUT", isList: false, isObject: false, isValue: true)
  body: Value @rdf(predicate: "http://purl.org/dc/terms/description", direction: "OUT", isList: false, isObject: false, isValue: true)
}

# the components used to define a view page or an edit page in the front-end
type Component {
  subComponents: [Component!]!
  type: String!
  value: String
}

input ComponentInput {
  subComponents: [ComponentInput!]!
  type: String!
  value: String
}

type Mutation {
  createViewConfig(dataSet: String!, collectionUri: String!, viewConfig: [ComponentInput!]!): [Component]
}
