#!/usr/bin/env bash

# set -o xtrace

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

z40=0000000000000000000000000000000000000000

while read local_ref local_sha remote_ref remote_sha; do
	echo "testing $local_ref"
	if [ "$local_sha" != $z40 ]; then #local_sha is 000.. when we're deleting a remote branch
		if [ "$remote_sha" = $z40 ]; then
      # New branch, find which commits are new for the remote
      while read ref name; do
        if [ "$curbase" = $z40 ]; then
          continue
        fi
        if [ $ref = "$local_sha" ]; then
          curbase=$z40
        fi
        newbase=$(git merge-base $local_sha $ref)
        #echo "git merge-base $local_sha $ref => $newbase"
        if [ -z "$curbase" ]; then
          curbase=$newbase
          #echo curbase = $newbase because curbase is empty
        elif git merge-base --is-ancestor $curbase $newbase; then
          #echo newbase because $curbase is an ancestor of $newbase
          curbase=$newbase
        fi
      done < <(git ls-remote -h "$2")

      if [ "$curbase" = $z40 ]; then
        range=
      else
        range="$curbase..$local_sha"
      fi
		else
			# Update to existing branch, examine new commits
			range="$remote_sha..$local_sha"
		fi
		if [ -z "$range" ]; then
		  echo "Commit is already on remote (probably on a different branch) so I'm skipping the message checks."
		else
      # Check for WIP commit
      commit=`git rev-list --pretty=short -i -E --grep '\b(WIP|stash|fixup)\b' $range`
      if [ -n "$commit" ]; then
        echo >&2 "Found commits containing the word 'WIP', 'stash' or 'fixup' in range $range, not pushing"
        echo
        echo "$commit"
        exit 1
      fi
    fi
		if git diff --name-only $range | grep -q pom.xml; then
			#pom was changed, do a full rebuild without maven cache
			./devtools/verify/cleanverify.sh -cb ${local_ref#refs/heads/} verify > prepushresult.txt && rm prepushresult.txt || exit 1
		else
			#pom was not changed, do a quick rebuild
			./devtools/verify/cleanverify.sh -b ${local_ref#refs/heads/} verify > prepushresult.txt && rm prepushresult.txt || exit 1
		fi

	fi
done

exit 0
