= Blank node improvements

== The problem

=== context
Make sure to read up on blank nodes by reading

 - To get a grip of the mindset that the people have who came up with blank nodes it's good to read https://www.cs.sfu.ca/~ggbaker/zju/math/pred-quant.html[a primer on predicate logic] and to be aware that those people where logicians who were trying to create a logical language in which you asserted facts about the world such that automated reasoning engines would then be able to reason about the world. 
   In other words, the future that they where building would allow you to ask the rdf graph "give me the best car-dealer in town" and it would interpret what you mean by "town" and "best" and "car-dealer".
   In that sense you should consider RDF to be less like XML or CSV and more like Prolog for building something like Siri.
   It's also good to be aware that that promise of rdf hasn't yet come to fruition. 
   We (the builders of timbuctoo) use rdf simply as a universal data exchange language, but what we use it for is of course not necessarily what other people intended it to (We use HTML as a user interface design language while it was originally intended to be more akin to the later docbook standard)
 - Once you understand the elementals of predicate logic you probably will follow along with: http://milicicvuk.com/blog/2011/07/14/problems-of-the-rdf-model-blank-nodes/
 - To make sure you didn't miss the point: saying `"Blank node x" "is called" "jauco"` and `"Blank node y" "is called" "Peter"` is logically equal to a graph that says `"Blank node z" "is called" "Peter" & "is called" "Jauco"`
 - However, no-one interprets it like that.

=== The current state of timbuctoo

Timbuctoo currently handles blank nodes by skolemizing them (i.e. turning them into worldwide unique uris).

We promote the usage of a diff tool for generating nquad-ud files, however timbuctoo will currently treat a blank node in the source file and a blank node in the patch file as a different node, even if they have the same blank node id.

In our own nquad-ud files we refer to blank nodes using the skolomized URL. This means that a parser of nquad-ud should be aware of our strange usage of blank nodes.

== The result

 - We should explain in more detail how we handle blank nodes in resourcesync datasets
 - We should make sure that an nquad-ud file as generated by the diff tool is a valid nquad-ud file
 - we should generate nquad-ud files where blank nodes are distinct from normal uri's

== The approach

 - We should add the following statements to the resourcesync documentation at documentation/exchange-protocol (they're written in short form here, the examples should be made more clear)
    Blank node in rdf patch
    - an rdf patch-able graph keeps a list of the files that it imported (timbuctoo does, using the fileList)
    - a blank node in an rdf-patch able graph is bound to the url that it came from (using some internal mechanism that's up to the nquad-ud parser, e.g. creating the result blank node id from a hash of the source url and source blank node id)
    - an nquad-ud file can express the source file using the `--- http://original/url` syntax, in this case all blank node identifiers following that statement (e.g. `_:b1`) will resolve using that url
    - to refer to blank nodes from different files you simply switch context i.e. `--- http://first/url` <blank node> <blank node> `--- http://other/url` <blank node> <blank node>
    - This has the implication that, if you move the datasets to a different url, your nquad-ud files will need to change. This is yet another reason why you want to use persistent urls (using a system linke handle or purl) to create the dataset urls in you resourcelist.
 - this document now diverges from the README in remote/rs and v5/rdfio/implementations/rdf4j/parsers/ so we should remove the duplicate information from there and link to the documentation/exchange-protocol file.
 - we should have the nquad-ud parser use the --- line (if it exists) for keeping track of the blank node context
  - we should still store blank nodes using the blanknode: uri's like we do
 - we should have the nquad-ud serializer add --- lines to set the blank node context when it needs to serialize a blank node (it can detect that from the blanknode: prefix)
 - we might want to use a uri that will never happen in an actual rdf uri, like `blanknode::` (double colon is not valid) or just `::`

== problems that come to mind but that this improvement won't fix

 - we should add handle uri's for our resources in the resource list (using a custom configurable url-persister)
 - when importing resourcesync lists, we should store the original file uri (and the local file name) or something like that.
